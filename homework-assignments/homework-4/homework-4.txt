1. Within compiled languages, source code is translated by the target machine into machine code which consists of instructions for the computer to execute. In interpreted languages, there is no translation to machine code but rather a different program (the interpreter) reads and executes the code. Compiled languages tend to run faster but it takes longer to develop and compile and there are issues with platform dependence. Interpreted languages are usually smaller and platform independent and have features such as dynamic typing. However, they execute slower. 

Compiled languages: C/CPP, Java
Interpreted languages: JavaScript, Python 

2. Within dynamically typed languages, type is bound to a value and it is checked at runtime meaning that the type of a variable can change over its lifetime. Within statically typed languages, type is bound to a variable and it is checked at compile time. Within weakly typed languages, types are recognized but data will get converted when reasonable. Within strongly typed languages, type disciple is enforced by the compiler. 

3. In JavaScript, variables can be declared with the following keywords: var, let, const. Var is global and function scoped as well as re-declarable. Let is block scoped and re-declarable. Const is block scoped but not re-declarable. 

4. Anonymous functions are functions without names. Higher order functions are functions that return a function or take other functions as arguments. Callback functions are functions that are passed as an argument to another function to be called later. First-class functions are functions that are treated like any other variable. 

5. Objects in JavaScript are a data structure consisting of key value pairs like maps in C++ or dictionaries in Python. Classes tend not to be used to create objects as JavaScript is written in a more functional style (as opposed to object-oriented). Objects follow the following syntax:
Literal constructor = {key: 'value'} 